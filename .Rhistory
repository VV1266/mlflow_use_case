library(mlflow)
mlflow_ui()
mlflow::mlflow_delete_experiment('exp_01')
mlflow::mlflow_delete_experiment('10')
seq(11,37,by=1)
for (node in sep(11,37,by=1)){}
for (node in sep(11,37,by=1)){}
for (node in sep(11,37,by=1)){mlflow::mlflow_delete_experiment(toString(node)) }
for (node in c(sep(11,37,by=1))){mlflow::mlflow_delete_experiment(toString(node)) }
for (node in c(seq(11,37,by=1))){mlflow::mlflow_delete_experiment(toString(node)) }
mlflow::mlflow_delete_experiment('11')
mlflow::mlflow_delete_experiment('11')
install.packages(logr)
library(logr)
install.packages("log")
library(mlflow)
mlflow_ui()
library(logr)
library(dplyr)
library(magrittr)
install.packages("tidylog")
library(tidylog)
detach("package:tidylog", unload = TRUE)
install.packages("log4r")
library(log4r)
# Import the log4r package.
library('log4r')
# Create a new logger object with create.logger().
logger <- create.logger()
# Set the logger's file output.
logfile(logger) <- 'base.log'
# Set the current level of the logger.
level(logger) <- 'INFO'
# Try logging messages with different priorities.
# At priority level INFO, a call to debug() won't print anything.
debug(logger, 'A Debugging Message')
info(logger, 'An Info Message')
warn(logger, 'A Warning Message')
error(logger, 'An Error Message')
fatal(logger, 'A Fatal Error Message')
source('~/Documents/GitHub/mlflow_use_case/main.R/main_init.R', echo=TRUE)
debugSource('~/Documents/GitHub/mlflow_use_case/main.R/main_init.R', echo=TRUE)
debugSource('~/Documents/GitHub/mlflow_use_case/main.R/main_init.R', echo=TRUE)
setwd("~/Documents/GitHub/mlflow_use_case")
work_dir <- "~/Documents/GitHub/mlflow_use_case"
file.path(work_dir,'sql',file_name)
log_close()
View(logger)
